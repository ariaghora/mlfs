{{< include _ndarray_base.qmd >}}

# Fungsi _reduce_
_Reduce_ berfungsi untuk mereduksi dimensi suatu ndarray sebanyak 1 dengan cara menerapkan fungsi universal pada suatu dimensi yang direduksi tersebut[^1].
Perhatikan potongan kode di bawah ini:

```{python}
n = np.multiply.reduce([2,3,5])
print(n)
```
Kode di atas mereduksi dimensi array dari 1 (vektor) menjadi dimensi 0 (skalar) dengan cara mengalikan semua elemen array tersebut.
Tidak hanya perkalian, kita bisa menggunakan fungsi _binary_ lain, seperti penjumlahan, pengurangan, dll.

Kita dapat mengimplementasikan fungsi _reduce_ versi kita sendiri.

```{python}
def reduce_at_dim(arr, dim, func, keep_dim=False):
    indices = [list(range(n)) for n in arr.shape]
    indices[dim] = 0
    result = arr[indices].as_list()

    for i in range(1, arr.shape[dim]):
        indices[dim] = i
        arr_data = arr[indices].as_list()
        for j in range(len(result)):
            result[j] = func(result[j], arr_data[j])
    new_shape = list(arr.shape)
    new_shape[dim] = 1

    result_arr = ndarray_from_list(result, *new_shape)

    # # TODO: squeeze
    return result_arr

def reduce(arr, dims, func, keep_dim=False):
    if isinstance(dims, int):
        dims = [dims]

    result = reduce_at_dim(arr, dims[0], func, True)
    for dim in dims[1:]:
        result = reduce_at_dim(result, dim, func, True)

    # TODO:
    # if not keep_dim:
    #     result = squeeze(result)
    return result

```

## Contoh 1: sum
```{python}
x = ndarray_from_list([1, 2, 3, 4], 2, 2)

print("Input:")
print_ndarray(x)
print("\nSum by axis 0:")
print_ndarray(reduce(x, 0, lambda x, y: x + y))
print("\nSum by axis 1:")
print_ndarray(reduce(x, 1, lambda x, y: x + y))
print("\nSum by axis 0, then 1:")
print_ndarray(reduce(x, [0, 1], lambda x, y: x + y))
```

## Contoh 2: max
```{python}
x = ndarray_from_list(
    [2, 1,
     1, 4],
     
     2, 2
)

print("Input:")
print_ndarray(x)
print("\nMax by axis 0:")
print_ndarray(reduce(x, 0, max))
print("\nMax by axis 1:")
print_ndarray(reduce(x, 1, max))
```

# Aplikasi _reduce_ untuk statistika

## Rata-rata

## Variansi dan standar deviasi

# Aljabar linear

Bagian ini membahas konsep-konsep aljabar linear yang, menurut penulis, cukup sering digunakan di berbagai aktivitas _machine learning_.

## Transposisi

```{python}
def transpose(arr):
    arr.strides = arr.strides[::-1]
    arr.shape = arr.shape[::-1]
    arr.rebuild_index()
    return arr

```
## Perkalian matriks

Perkalian matriks banyak digunakan di berbagai disiplin ilmu yang melibatkan komputasi, termasuk di ranah _machine learning_.

```{python}
...

def matmul(arr1, arr2):
    if len(arr1.shape) != 2 and len(arr2.shape) != 2:
        raise Exception("Fungsi ini hanya bisa digunakan untuk ndarray berdimensi 2")

    if arr1.shape[1] != arr2.shape[0]:
        raise Exception(
            f"Tidak bisa mengalikan ndarray berbentuk {arr1.shape} dan {arr2.shape}"
        )

    result_data = []
    for row in range(arr1.shape[0]):
        for col in range(arr2.shape[1]):
            vec1 = arr1[row]
            vec2 = transpose(arr2[:, col])
            dot = sum(multiply(vec1, vec2).as_list())
            result_data.append(dot)
    return ndarray_from_list(result_data, arr1.shape[0], arr2.shape[1])

```

```{python}
x = ndarray_from_list([1, 2, 3, 4, 5, 6], 3, 2)
y = ndarray_from_list([1, 1, 1, 1, 1, 1], 2, 3)
res = matmul(x, y)
print_ndarray(res)
```

:::{.callout-note}
## Catatan
Perkalian matriks adalah permasalahan yang sudah cukup lama dipelajari.
Ada satu \textit{library} umum yang digunakan banyak \textit{library} ndarray dalam melakukan perkalian matriks, yaitu \textit{basic linear algebra subroutine} (BLAS).
Tidak bisa dipungkiri perkalian matriks di buku ini naif dan lambat (selain karena python sendiri bahasa terinterpretasi dan lambat).
:::

# Pemuatan data
Agar tetap ringkas, data yang akan kita gunakan berupa tabular dalam format CSV.
Oleh karena itu, kita perlu membuat fungsi untuk memuat data dari file CSV.
```{python}

def load_csv(path, delimiter=","):
    """ Asumsi:
        - Data berupa numerik secara keseluruhan 
        - Jumlah kolom berdasarkan baris pertama
    
    """
    num_cols = None
    num_rows = 0
    data = []
    with open(path, "r") as f:
        for line in f:
            line = line.strip()
            if len(line) == 0:
                continue
            row=line.split(delimiter)
            if num_cols is None:
                num_cols = len(row)
            data.extend(row)
            num_rows += 1 
    return ndarray_from_list(data, num_rows, num_cols)


```

Contoh penggunaan:
```{python}
dataset = load_csv("datasets/breast_cancer.csv")
X = dataset[:, 1:]
y = dataset[:, 0]

print("Fitur dan label pada 5 baris pertama:")
print_ndarray(X[:5])
print_ndarray(y[:5])
```

[^1]: https://numpy.org/doc/stable/reference/generated/numpy.ufunc.reduce.html